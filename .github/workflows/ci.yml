name: ci
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  linting:
    name: "pre-commit hooks" # (includes Python formatting + linting)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
        name: Checkout code
      - name: Internal github app token
        id: token
        uses: getsentry/action-github-app-token@v1
        continue-on-error: true
        with:
          app_id: ${{ secrets.SENTRY_INTERNAL_APP_ID }}
          private_key: ${{ secrets.SENTRY_INTERNAL_APP_PRIVATE_KEY }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: cache-epoch-1|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Setup pre-commit
        run: make setup-git
      - uses: getsentry/paths-filter@v2
        id: files
        with:
          # Enable listing of files matching each filter.
          # Paths to files will be available in `${FILTER_NAME}_files` output variable.
          # Paths will be escaped and space-delimited.
          # Output is usable as command line argument list in linux shell
          list-files: shell

          # It doesn't make sense to lint deleted files.
          # Therefore we specify we are only interested in added or modified files.
          filters: |
            all:
              - added|modified: '**/*'
      - name: Run pre-commit checks
        # Run pre-commit to lint and format check files that were changed (but not deleted) compared to master.
        # XXX: there is a very small chance that it'll expand to exceed Linux's limits
        #      `getconf ARG_MAX` - max # bytes of args + environ for exec()
        # we skip the `no-commit-to-branch` because in CI we are in fact on master already
        # and we have merged to it
        run: |
          SKIP=no-commit-to-branch pre-commit run --files ${{ steps.files.outputs.all_files }}

      # If working tree is dirty, commit and update if we have a token
      - name: Apply any pre-commit fixed files
        if: steps.token.outcome == 'success' && github.ref != 'refs/heads/master' && always()
        uses: getsentry/action-github-commit@main
        with:
          github-token: ${{ steps.token.outputs.token }}

  typing:
    name: "mypy typing"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
        name: Checkout code
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install-python-dependencies
      - name: Run mypy
        run: |
          make backend-typing

  snuba-image:
    name: Build snuba CI image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch name
        id: branch
        # strip `refs/heads/` from $GITHUB_REF and replace `/` with `-` so that
        # it can be used as a docker tag
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | tr / -)"

      # We are only using ghcr here for CI as `setup-gcloud` is a bit slow
      # Should revisit this when we move off of google cloud build (we may want to move these to GCR)
      - name: Registry login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # These are pulled in order to be able to use docker layer caching
      - name: Pull snuba CI images
        if: github.repository_owner == 'getsentry'
        run: |
          docker pull ghcr.io/getsentry/snuba-ci:${{ github.sha }} || \
            docker pull ghcr.io/getsentry/snuba-ci:${{ steps.branch.outputs.branch }} || \
            docker pull ghcr.io/getsentry/snuba-ci:latest || true

      - name: Build snuba docker image for CI
        if: github.repository_owner == 'getsentry'
        run: |
          docker build . \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t ghcr.io/getsentry/snuba-ci:latest \
            -t ghcr.io/getsentry/snuba-ci:${{ github.sha }} \
            -t ghcr.io/getsentry/snuba-ci:${{ steps.branch.outputs.branch }} \
            --cache-from ghcr.io/getsentry/snuba-ci:latest \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ steps.branch.outputs.branch }} \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ github.sha }} \
            --target testing

      - name: Publish images for cache
        if: steps.branch.outputs.branch == 'master' || github.event.pull_request.head.repo.full_name == github.repository
        run: |
          # Useful to speed up CI
          docker push ghcr.io/getsentry/snuba-ci:${{ steps.branch.outputs.branch }}
          docker push ghcr.io/getsentry/snuba-ci:${{ github.sha }}
          if [ "${{ steps.branch.outputs.branch }}" == 'master' ]; then
            # The latest tag should only be published on `master`
            docker push ghcr.io/getsentry/snuba-ci:latest
          fi

  # This step does not have a set timeout because it is very slow. This is due
  # because emulation required (this is running on an Intel host rather than an arm64 host)
  # and that many Python packages do not have arm wheels, thus, requirying to build them from source.
  # Upgrading Python package versions + giving access to a cache could improve things a lot
  snuba-arm64-image:
    name: "Docker Arm64 build"
    runs-on: ubuntu-latest
    env:
      # `sentry devservices up snuba` picks up the `amd64` version of the image
      # For now, we will publish to a different name until we want to officially
      # support the image on Docker Hub
      # NOTE: This image has only been tested for local development
      SNUBA_IMAGE: ghcr.io/getsentry/snuba-arm64-dev
    steps:
      - uses: actions/checkout@v2
        name: Checkout code

      - name: Get branch name
        id: branch
        # strip `refs/heads/` from $GITHUB_REF and replace `/` with `-` so that
        # it can be used as a docker tag
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | tr / -)"

      - name: enable arm64 building
        run: docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Registry login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull snuba CI images
        run: |
          docker pull ${SNUBA_IMAGE}:${{ steps.branch.outputs.branch }} || \
            docker pull ${SNUBA_IMAGE}:latest || true

      - name: Create Image
        run: |
          docker buildx create --name arm64-builder --use
          docker buildx build --platform linux/arm64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from ${SNUBA_IMAGE}:latest \
            --cache-from ${SNUBA_IMAGE}:${{ steps.branch.outputs.branch }} \
            -t ${SNUBA_IMAGE}:latest \
            -t ${SNUBA_IMAGE}:${{ steps.branch.outputs.branch }} \
            -t ${SNUBA_IMAGE}:${{ github.sha }} \
            --load .

      - name: Publish
        # Forks cannot push to the getsentry org
        if: steps.branch.outputs.branch == 'master' || github.event.pull_request.head.repo.full_name == github.repository
        run: |
          # Useful to speed up PRs
          docker push ${SNUBA_IMAGE}:${{ steps.branch.outputs.branch }}
          if [ "${{ steps.branch.outputs.branch }}" == 'master' ]; then
            # Useful for regression testing on Sentry's checkout
            docker push ${SNUBA_IMAGE}:${{ github.sha }}
            # The latest tag should only be published on `master`
            docker push ${SNUBA_IMAGE}:latest
          fi

  tests:
    needs: [linting, snuba-image]
    name: Tests and code coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        snuba_settings: ["test", "test_distributed"]
    steps:
      - uses: actions/checkout@v2
        name: Checkout code

      - name: Pull snuba CI images
        run: |
          docker pull ghcr.io/getsentry/snuba-ci:${{ github.sha }} || \
            docker pull ghcr.io/getsentry/snuba-ci:${{ needs.snuba-image.outputs.branch }} || \
            docker pull ghcr.io/getsentry/snuba-ci:latest || true

      - name: Build snuba docker image for CI
        run: |
          docker build . \
            -t snuba-test \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ github.sha }} \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ needs.snuba-image.outputs.branch }} \
            --cache-from ghcr.io/getsentry/snuba-ci:latest \
            --target testing

      - name: Docker set up
        run: |
          docker network create --attachable cloudbuild

      - name: Docker Snuba tests
        run: |
          SNUBA_IMAGE=snuba-test SNUBA_SETTINGS=${{ matrix.snuba_settings }} docker-compose -f docker-compose.gcb.yml run --rm snuba-test

      - name: Upload to codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov -t ${CODECOV_TOKEN}

  sentry:
    needs: [snuba-image]
    runs-on: ubuntu-latest
    timeout-minutes: 90

    strategy:
      matrix:
        instance: [0, 1]

    env:
      # XXX: MATRIX_INSTANCE_TOTAL must be hardcoded to the length of strategy.matrix.instance.
      MATRIX_INSTANCE_TOTAL: 2
      MIGRATIONS_TEST_MIGRATE: 1

    steps:
      # Checkout codebase
      - name: Checkout snuba
        uses: actions/checkout@v2

      - name: Pull snuba CI images
        run: |
          docker pull ghcr.io/getsentry/snuba-ci:${{ github.sha }} || \
            docker pull ghcr.io/getsentry/snuba-ci:${{ needs.snuba-image.outputs.branch }} || \
            docker pull ghcr.io/getsentry/snuba-ci:latest || true

      - name: Build snuba docker image for CI
        run: |
          docker build . \
            -t snuba-test \
            --cache-from ghcr.io/getsentry/snuba-ci:latest \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ needs.snuba-image.outputs.branch }} \
            --cache-from ghcr.io/getsentry/snuba-ci:${{ github.sha }} \
            --target testing

      # Checkout Sentry and run integration tests against latest snuba
      # Make sure this is after `docker build`, otherwise we'll break docker cache
      - name: Checkout sentry
        uses: actions/checkout@v2
        with:
          repository: getsentry/sentry
          path: sentry

      - name: Setup steps
        id: setup
        run: |
          pip install --upgrade pip wheel
          # We cannot execute actions that are not placed under .github of the main repo
          mkdir -p .github/actions
          cp -r sentry/.github/actions/* .github/actions

      - name: Setup Sentry
        id: setup-sentry
        uses: ./.github/actions/setup-sentry
        with:
          workdir: sentry
          cache-files-hash: ${{ hashFiles('sentry/requirements**.txt') }}
          python-version: 3.8
          snuba: false
          kafka: true
          clickhouse: true

      - name: Start snuba
        run: |
          docker run -d --rm \
            -p 127.0.0.1:1218:1218 \
            -e PYTHONUNBUFFERED=1 \
            -e SNUBA_SETTINGS=docker \
            -e DEBUG=1 \
            -e DEFAULT_BROKERS=sentry_kafka:9092 \
            -e CLICKHOUSE_HOST=sentry_clickhouse \
            -e CLICKHOUSE_PORT=9000 \
            -e CLICKHOUSE_HTTP_PORT=8123 \
            -e REDIS_HOST=sentry_redis \
            -e REDIS_PORT=6379 \
            -e REDIS_DB=1 \
            --name sentry_snuba \
            --network sentry \
            snuba-test
          docker exec sentry_snuba snuba migrations migrate --force

      - name: Run snuba tests
        working-directory: sentry
        run: |
          make test-snuba
