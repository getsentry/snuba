#!/usr/bin/env python
import argparse

from snuba.datasets.entities.factory import ENTITY_NAME_LOOKUP
from snuba.datasets.factory import get_dataset
from snuba.redis import redis_client
from snuba.subscriptions.data import PartitionId
from snuba.subscriptions.store import RedisSubscriptionDataStore
from snuba.subscriptions.subscription import SubscriptionDeleter

# Remove all subscriptions for the dataset
parser = argparse.ArgumentParser(description="Delete all subscriptions for a dataset")
parser.add_argument(
    "--dataset",
    type=str,
    help="Dataset to remove",
    dest="dataset",
    choices=["events"],
    default="events",
)
parsed = parser.parse_args()


dataset_name = parsed.dataset
dataset = get_dataset(dataset_name)
entity = dataset.get_default_entity()
entity_key = ENTITY_NAME_LOOKUP[entity]
storage = entity.get_writable_storage()
assert storage is not None
stream_loader = storage.get_table_writer().get_stream_loader()
topic_spec = stream_loader.get_default_topic_spec()

stores = [
    RedisSubscriptionDataStore(redis_client, entity_key, PartitionId(i))
    for i in range(topic_spec.partitions_number)
]


print(f"Deleting {entity_key.value} subscriptions:")
for i, store in enumerate(stores):
    for subscription in store.all():
        key, _data = subscription
        print(f"Deleting {key}")
        SubscriptionDeleter(entity_key, PartitionId(i)).delete(key)
