version: v1
kind: writable_storage
name: transactions

storage:
  key: transactions
  set_key: transactions

schema:
  columns:
    [
      { name: project_id, type: UInt, args: { size: 64 } },
      { name: event_id, type: UUID },
      { name: trace_id, type: UUID, args: { schema_modifiers: [nullable] } },
      { name: span_id, type: UInt, args: { size: 64 } },
      { name: transaction_name, type: String },
      { name: transaction_hash, type: UInt, args: { size: 64, schema_modifiers: [readonly] } },
      { name: transaction_op, type: String },
      { name: transaction_status, type: UInt, args: { size: 8 } },
      { name: start_ts, type: DateTime },
      { name: start_ms, type: UInt, args: { size: 16 } },
      { name: finish_ts, type: DateTime },
      { name: finish_ms, type: UInt, args: { size: 16 } },
      { name: duration, type: UInt, args: { size: 32 } },
      { name: platform, type: String },
      { name: environment, type: String, args: { schema_modifiers: [nullable] } },
      { name: release, type: String, args: { schema_modifiers: [nullable] } },
      { name: dist, type: String, args: { schema_modifiers: [nullable] } },
      { name: ip_address_v4, type: IPv4, args: { schema_modifiers: [nullable] } },
      { name: ip_address_v6, type: IPv6, args: { schema_modifiers: [nullable] } },
      { name: user, type: String },
      { name: user_hash, type: UInt, args: { size: 64, schema_modifiers: [readonly] } },
      { name: user_id, type: String, args: { schema_modifiers: [nullable] } },
      { name: user_name, type: String, args: { schema_modifiers: [nullable] } },
      { name: user_email, type: String, args: { schema_modifiers: [nullable] } },
      { name: sdk_name, type: String },
      { name: sdk_version, type: String },
      { name: http_method, type: String, args: { schema_modifiers: [nullable] } },
      { name: http_referer, type: String, args: { schema_modifiers: [nullable] } },
      {
        name: tags,
        type: Nested,
        args:
          {
            subcolumns:
              [
                { name: key, type: String },
                { name: value, type: String },
              ],
          },
      },
      { name: _tags_hash_map, type: Array, args: { type: UInt, arg: 64, schema_modifiers: [readonly] } },
      {
        name: contexts,
        type: Nested,
        args:
          {
            subcolumns:
              [
                { name: key, type: String },
                { name: value, type: String },
              ],
          },
      },
      {
        name: measurements,
        type: Nested,
        args:
          {
            subcolumns:
              [
                { name: key, type: String },
                { name: value, type: Float, args: { size: 64 } },
              ],
          },
      },
      {
        name: span_op_breakdowns,
        type: Nested,
        args:
          {
            subcolumns:
              [
                { name: key, type: String },
                { name: value, type: Float, args: { size: 64 } },
              ],
          },
      },
      {
        name: spans,
        type: Nested,
        args:
          {
            subcolumns:
              [
                { name: op, type: String },
                { name: group, type: UInt, args: { size: 64 } },
                { name: exclusive_time, type: Float, args: { size: 64 } },
                { name: exclusive_time_32, type: Float, args: { size: 32 } },
              ],
          },
      },
      { name: partition, type: UInt, args: { size: 16 } },
      { name: offset, type: UInt, args: { size: 64 } },
      { name: message_timestamp, type: DateTime },
      { name: retention_days, type: UInt, args: { size: 16 } },
      { name: deleted, type: UInt, args: { size: 8 } },
      { name: type, type: String, args: { schema_modifiers: [readonly] } },
      { name: message, type: String, args: { schema_modifiers: [readonly] } },
      { name: title, type: String, args: { schema_modifiers: [readonly] } },
      { name: transaction_source, type: String },
      { name: timestamp, type: DateTime, args: { schema_modifiers: [readonly] } },
      { name: group_ids, type: Array, args: { type: UInt, arg: 64 } },
      { name: app_start_type, type: String },
    ]
  local_table_name: transactions_local
  dist_table_name: transactions_dist
  partition_format: [retention_days, date]

query_processors:
  - processor: UniqInSelectAndHavingProcessor
  - processor: MappingColumnPromoter
    args:
      mapping_specs:
        tags:
          environment: environment
          sentry:release: release
          sentry:dist: dist
          sentry:user: user
        contexts:
          trace.trace_id: trace_id
          trace.span_id: span_id
  - processor: UUIDColumnProcessor
    args:
      columns: [event_id, trace_id]
  - processor: HexIntColumnProcessor
    args:
      columns: [span_id]
  - processor: EventsBooleanContextsProcessor
  - processor: MappingOptimizer
    args:
      column_name: tags
      hash_map_name: _tags_hash_map
      killswitch: tags_hash_map_enabled
  - processor: EmptyTagConditionProcessor
  - processor: ArrayJoinKeyValueOptimizer
    args:
      column_name: tags
  - processor: ArrayJoinKeyValueOptimizer
    args:
      column_name: measurements
  - processor: ArrayJoinKeyValueOptimizer
    args:
      column_name: span_op_breakdowns
  # the bloom filter optimizer should occur before the array join optimizer
  # on the span columns because the array join optimizer will rewrite the
  # same conditions the bloom filter optimizer is looking for
  - processor: BloomFilterOptimizer
    args:
      column_name: spans
      key_names: [op, group]
      val_names: [exclusive_time_32]
  - processor: ArrayJoinOptimizer
    args:
      column_name: spans
      key_names: [op, group]
      val_names: [exclusive_time_32]
  - processor: ArrayHasOptimizer
    args:
      array_columns: [spans.op, spans.group]
  - processor: HexIntArrayColumnProcessor
    args:
      columns: [spans.group]
  - processor: PrewhereProcessor
    args:
      prewhere_candidates: [event_id, trace_id, span_id, transaction_name, transaction, title]
  - processor: TableRateLimit
  - processor: TupleUnaliaser

query_splitters:
  -
    splitter: TimeSplitQueryStrategy
    args:
      timestamp_col: finish_ts

mandatory_condition_checkers:
  - condition: ProjectIdEnforcer

writer_options:
  insert_allow_materialized_columns: 1
  input_format_skip_unknown_fields: 1

stream_loader:
  processor:
    name: TransactionsMessageProcessor
  default_topic: transactions
  commit_log_topic: snuba-transactions-commit-log
  subscription_scheduler_mode: global
  subscription_scheduled_topic: scheduled-subscriptions-transactions
  subscription_result_topic: transactions-subscription-results
