Attempted to get the simple case working (single entity) without subqueries.

Ran into (in hindsight) an obvious error: formulas with different filters in the components don't work.

------


pytest tests/query/joins/test_metrics_subqueries.py

More progress, groupby is not working. Need to add groupby to SubqueryDraft, and eventually figure out how to get that working
Thought: Do I need groupby in the top level query? I don't think I actually do.

------------


pytest tests/query/joins/test_metrics_subqueries.py

This tests the new metrics_subquery_generator.py file. This file needs to be cleaned up to do the generation I want.

------------------------

pytest tests/query/parser/test_formula_mql_query.py -k "test_simple_formula"

Trying to get aliasing working as expected: in conditions the table alias is not being added to the alias, so you get weird columns: Column(alias='_snuba_timestamp', table_name='d3', column_name='timestamp') - Done

The join clause isn't right, the conditions reference the wrong columns
JoinConditionExpression(table_alias='d1', column='d3.time')

Fixed this by simplifying the recursion to skip the self reference problem entirely.
Discovered that the groupby wasn't being properly done (need to parse all the leaf nodes)

This test passes! Known issues:
Single expression formulas (unary, scalars)
Group bys


pytest tests/test_metrics_mql_api.py -k "test_simple_formula"

Problems
"time AS _snuba_time" ??
Missing condition on status code
Pushing down aggregates



SELECT
    (plus(avg((d0._snuba_value AS _snuba_value)), avg(_snuba_value)) AS _snuba_aggregate_value),
    (d1.`_snuba_d1.time` AS `_snuba_d1.time`),
    (d0.`_snuba_d0.time` AS `_snuba_d0.time`)
FROM (
    SELECT
        (toStartOfInterval((timestamp AS _snuba_timestamp), toIntervalSecond(60), 'Universal') AS `_snuba_d1.time`),
        (time AS _snuba_time),
        (value AS _snuba_value)
    FROM generic_metric_distributions_aggregated_local
    WHERE greaterOrEquals(_snuba_timestamp, toDateTime('2024-03-19T09:15:00', 'Universal'))
    AND less(_snuba_timestamp, toDateTime('2024-03-19T15:15:00', 'Universal'))
    AND in((project_id AS _snuba_project_id), (1, 2))
    AND in((org_id AS _snuba_org_id), tuple(101))
    AND equals((use_case_id AS _snuba_use_case_id), 'performance')
    AND equals((granularity AS _snuba_granularity), 1)
    AND equals((metric_id AS _snuba_metric_id), 1068)
    AND greaterOrEquals(timestamp, toDateTime('2024-03-19T09:15:00', 'Universal'))
    AND less(timestamp, toDateTime('2024-03-19T15:15:00', 'Universal'))
    AND in(project_id, (1, 2))
    AND in(org_id, tuple(101))
    AND equals(use_case_id, 'performance')
    AND equals(granularity, 1)
    AND equals(metric_id, 1068)
) d1 INNER JOIN (
    SELECT
        (toStartOfInterval((timestamp AS _snuba_timestamp), toIntervalSecond(60), 'Universal') AS `_snuba_d0.time`),
        (time AS _snuba_time),
        (value AS _snuba_value)
    FROM generic_metric_distributions_aggregated_local
    WHERE greaterOrEquals(_snuba_timestamp, toDateTime('2024-03-19T09:15:00', 'Universal'))
    AND less(_snuba_timestamp, toDateTime('2024-03-19T15:15:00', 'Universal'))
    AND in((project_id AS _snuba_project_id), (1, 2))
    AND in((org_id AS _snuba_org_id), tuple(101))
    AND equals((use_case_id AS _snuba_use_case_id), 'performance')
    AND equals((granularity AS _snuba_granularity), 1)
    AND equals((metric_id AS _snuba_metric_id), 1068)
    AND greaterOrEquals(timestamp, toDateTime('2024-03-19T09:15:00', 'Universal'))
    AND less(timestamp, toDateTime('2024-03-19T15:15:00', 'Universal'))
    AND in(project_id, (1, 2)) AND in(org_id, tuple(101))
    AND equals(use_case_id, 'performance')
    AND equals(granularity, 1)
    AND equals(metric_id, 1068)
) d0 ON d0._snuba_time=d1._snuba_time
GROUP BY `_snuba_d1.time`, `_snuba_d0.time`
ORDER BY `_snuba_d0.time` ASC
LIMIT 1000 OFFSET 0
